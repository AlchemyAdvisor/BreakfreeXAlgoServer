stages:
  - build
  - publish

variables:
  IMAGE_NAME: "twelvedata"

build:
  image: microsoft/dotnet:2.2-sdk
  stage: build
  script:
    - dotnet restore --configfile ./NuGet.Config
    - dotnet build
  #tags:
  #  - netcore

deploy-latest:
  stage: publish
  services:
    - docker:dind
  image: docker:latest
  only:
    - ci
    - develop
  script:
  - CONTAINER_IMAGE=$(echo "$CI_REGISTRY/$CI_PROJECT_PATH" | tr '[A-Z]' '[a-z]')
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  - docker pull $CONTAINER_IMAGE:latest || true
  - docker build --cache-from $CONTAINER_IMAGE:latest -t $IMAGE_NAME .
  - docker tag $IMAGE_NAME $CONTAINER_IMAGE:latest
  - docker push $CONTAINER_IMAGE:latest
  - docker logout
  # tags: 
  # - docker

deploy-release:
  stage: publish
  when: manual
  services:
    - docker:dind
  image: docker:latest
  # before_script:
  # - apk add --no-cache curl jq python py-pip
  # - pip install awscli
  # - apk update && apk add git
  # - TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
  # - MINORVERSION=$(git rev-list --all --count)
  # - MAJORVERSION=${TAG:-0.0}
  # - VERSION=$MAJORVERSION.$MINORVERSION
  only:
    - ci
    - master
  script:
  - CONTAINER_IMAGE=$(echo "$CI_REGISTRY/$CI_PROJECT_PATH" | tr '[A-Z]' '[a-z]')
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  - docker pull $CONTAINER_IMAGE:stable || true
  - docker build --cache-from $CONTAINER_IMAGE:stable -t $IMAGE_NAME .
  - docker tag $IMAGE_NAME $CONTAINER_IMAGE:stable
  - docker push $CONTAINER_IMAGE:stable
  - docker logout
  #- $(aws ecr get-login --no-include-email --region ap-southeast-1)
  #- docker tag $IMAGE_NAME $AWS_REGISTRY/$IMAGE_NAME:$VERSION
  #- docker tag $IMAGE_NAME $AWS_REGISTRY/$IMAGE_NAME:stable
  #- docker push $AWS_REGISTRY/$IMAGE_NAME:$VERSION
  #- docker push $AWS_REGISTRY/$IMAGE_NAME:stable
  #- docker logout
  #tags:
  #  - docker
