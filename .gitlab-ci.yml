stages:
  - build
  - publish

variables:
  IMAGE_NAME: "algoserver"

build:
  image: mcr.microsoft.com/dotnet/sdk:3.1
  stage: build
  script:
    - dotnet restore --configfile ./NuGet.Config
    - dotnet build
  #tags:
  #  - netcore

deploy-latest:
  stage: publish
  services:
    - docker:dind
  image: docker:latest
  only:
    - ci
    - develop
    - feature/bot_api
  script:
  - CONTAINER_IMAGE=$(echo "$CI_REGISTRY/$CI_PROJECT_PATH" | tr '[A-Z]' '[a-z]')
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  - docker pull $CONTAINER_IMAGE:latest || true
  - docker build --cache-from $CONTAINER_IMAGE:latest -t $IMAGE_NAME .
  - docker tag $IMAGE_NAME $CONTAINER_IMAGE:latest
  - docker push $CONTAINER_IMAGE:latest
  - docker logout
  - apk update && apk add curl jq
  - curl -LO https://stedolan.github.io/jq/download/linux64/jq
  - chmod u+x jq && mv jq /bin/jq
  - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.19.2/bin/linux/amd64/kubectl
  - chmod u+x kubectl && mv kubectl /bin/kubectl
  - LATEST_DIGEST=$(curl -s --header "PRIVATE-TOKEN:$PRIVATE_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/1222029/tags/latest" | jq -r '.digest')
  - echo "Image '$CONTAINER_IMAGE@$LATEST_DIGEST'"
  - kubectl config set-cluster k8s --server=${K8S_SERVER}
  - kubectl config set clusters.k8s.certificate-authority-data ${K8S_CERTIFICATE_AUTHORITY_DATA}
  - kubectl config set-credentials ${K8S_USER} --token="${K8S_USER_TOKEN}"
  - kubectl config set-context k8s-stage --cluster=k8s --user=${K8S_USER}
  - kubectl config use-context k8s-stage
  - kubectl config current-context
  - kubectl set image deployment/algoserver algoserver=$CONTAINER_IMAGE@$LATEST_DIGEST --namespace staging
  - kubectl set image deployment/algoscanner algoscanner=$CONTAINER_IMAGE@$LATEST_DIGEST --namespace staging
  - kubectl get pods -n staging
  # tags: 
  # - docker

deploy-release:
  stage: publish
  when: manual
  services:
    - docker:dind
  image: docker:latest
  only:
    - ci
    - master
  script:
  - CONTAINER_IMAGE=$(echo "$CI_REGISTRY/$CI_PROJECT_PATH" | tr '[A-Z]' '[a-z]')
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  - docker pull $CONTAINER_IMAGE:stable || true
  - docker build --cache-from $CONTAINER_IMAGE:stable -t $IMAGE_NAME .
  - docker tag $IMAGE_NAME $CONTAINER_IMAGE:stable
  - docker push $CONTAINER_IMAGE:stable
  - docker logout
  - apk update && apk add curl jq
  - curl -LO https://stedolan.github.io/jq/download/linux64/jq
  - chmod u+x jq && mv jq /bin/jq
  - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.19.2/bin/linux/amd64/kubectl
  - chmod u+x kubectl && mv kubectl /bin/kubectl
  - LATEST_DIGEST=$(curl -s --header "PRIVATE-TOKEN:$PRIVATE_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/1222029/tags/stable" | jq -r '.digest')
  - echo "Image '$CONTAINER_IMAGE@$LATEST_DIGEST'"
  - kubectl config set-cluster k8s --server=${K8S_SERVER_PROD}
  - kubectl config set clusters.k8s.certificate-authority-data ${K8S_CERTIFICATE_AUTHORITY_DATA_PROD}
  - kubectl config set-credentials ${K8S_USER_PROD} --token="${K8S_USER_TOKEN_PROD}"
  - kubectl config set-context k8s-stage --cluster=k8s --user=${K8S_USER_PROD}
  - kubectl config use-context k8s-stage
  - kubectl config current-context
  - kubectl set image deployment/algoserver algoserver=$CONTAINER_IMAGE@$LATEST_DIGEST --namespace prod
  - kubectl set image deployment/algoscanner algoscanner=$CONTAINER_IMAGE@$LATEST_DIGEST --namespace prod
  - kubectl get pods -n prod
  #tags:
  #  - docker